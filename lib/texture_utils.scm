(define (load-texture filename position)
  (let* ((dummy (bmp-load filename))
         (dummy2 (print "here1"))
         (dummy2 (print dummy))
         (t-meta (bmp-header (bmp-load filename)))
         (dummy (print "here"))
         (width (bmp-width t-meta))
         (bpp (bmp-bits-per-pixel t-meta))
         (height (bmp-height t-meta))
         (format (if (equal? bpp 4)
                     gl:RGBA
                     gl:RGB))
         ;(t (load-bmp-texture filename)))
         ;(t (flip-bmp-vertically (* width bpp) (load-bmp-texture filename))))
         ;(t (flip-bmp-horizontally (* width bpp) (load-bmp-texture filename))))
         (t (flip-bmp-vertically (* width bpp) (flip-bmp-horizontally (* width bpp) (load-bmp-texture filename)))))
    (print "---------------------------------------------------------------------------")    
    (print (string-append "Setting " filename " to texture: " (number->string position)))
    ;; (print t)
    (print (string-append (number->string width) "x" (number->string height) " pixels"))
    (gl:BindTexture gl:TEXTURE_2D (u32vector-ref texture-handles position))
    (gl:PixelStorei gl:UNPACK_ALIGNMENT   1)
    (gl:PixelStorei gl:UNPACK_ROW_LENGTH  0)
    (gl:PixelStorei gl:UNPACK_SKIP_PIXELS 0)
    (gl:PixelStorei gl:UNPACK_SKIP_ROWS   0)
    (gl:TexImage2D gl:TEXTURE_2D 0 format width height
                   0 format gl:UNSIGNED_BYTE (make-locative (u8vector->blob t)))
    (gl:TexParameteri gl:TEXTURE_2D gl:TEXTURE_MAG_FILTER gl:LINEAR)
    (gl:TexParameteri gl:TEXTURE_2D gl:TEXTURE_MIN_FILTER gl:LINEAR)
    (gl:TexParameteri gl:TEXTURE_2D gl:TEXTURE_WRAP_S gl:REPEAT)
    (gl:TexParameteri gl:TEXTURE_2D gl:TEXTURE_WRAP_T gl:REPEAT)
    (set! *texture-count* (+ *texture-count* 1))))

(define (make-check-image)
  (let* ((check-image-height 64)
         (check-image-width 64)
         (buffer-size (* check-image-width check-image-height 3))
         (buffer (make-u8vector (* check-image-width check-image-height 3) 0))
         (dummy 255)
         (counter 0))
    (do ((i 0 (+ i 1))) ((> i (- check-image-height 1)) buffer)
      (do ((j 0 (+ j 1))) ((> j (- check-image-width 1)))
        (let ((c (if (> (remainder i 10) 3) 255 0)))
          (u8vector-set! buffer (+ counter 0) c)
          (u8vector-set! buffer (+ counter 1) counter)
          (u8vector-set! buffer (+ counter 2) c)
          ;(u8vector-set! buffer (+ counter 3) 0)
          (set! counter (+ 3 counter)))))))
